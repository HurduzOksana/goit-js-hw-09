{"mappings":"oeACA,IAAAA,EAAAC,EAAA,SAI4B,MAAtBC,EAAaC,SAASC,cAAc,CAACC,KAAO,UAC5CC,EAAYH,SAASC,cAAc,CAACC,KAAO,SAC3CE,EAAWJ,SAASC,cAAc,CAACC,KAAO,WAkCT,SAA9BG,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GActC,OAZgB,IAAIC,SAAQ,CAACC,EAASC,KACtCC,YAAW,KACLN,EAE4CI,EAAtC,C,SAACN,E,MAAUC,IAG2BM,EAAvC,C,SAACP,E,MAAUC,GAAO,GAG1BA,EAAM,G,CA9CGP,SAASC,cAAc,UAU/Bc,iBAAiB,UAEvB,SAAkBC,GAChBA,EAAMC,iBAEY,IAAdC,EAAQC,OAAOpB,EAAWqB,OAC1BC,EAAOF,OAAOhB,EAAUiB,OACxBE,EAASH,OAAOf,EAASgB,OAEoB,IAA5C,IAAIG,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAE+ClB,EAAjEkB,EAAGL,GACdM,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,MACnBV,EAAA4B,OAAOC,QAAQ,uBAAqBpB,QAAiBC,MAAU,IAEhEoB,OAAM,EAACrB,SAAEA,EAAQC,MAAEA,MACjBV,EAAA4B,OAAOG,QAAQ,sBAAoBtB,QAAiBC,MAAU,IAEhEW,GAASG,C","sources":["src/js/03-promises.js"],"sourcesContent":["\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// Створюємо посилання на елементи\n\nconst firstDelay = document.querySelector([name = \"delay\"]);\nconst delayStep = document.querySelector([name = \"step\"]);\nconst amountEl = document.querySelector([name = \"amount\"]);\nconst btnEl = document.querySelector(`button`);\n\n\n// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах,\n// крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів,\n// скільки ввели в поле amount.Під час кожного виклику передай їй номер промісу(position), що створюється, і затримку,\n// враховуючи першу затримку(delay), введену користувачем, і крок(step).\n\nbtnEl.addEventListener(`submit`, onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault();\n  // прив'язуємо amount до інпуту\n  let delay = Number(firstDelay.value);\n  let step = Number(delayStep.value);\n  let amount = Number(amountEl.value);\n  // на кожній ітерації передаєм номер промісу, затримку і крок\n  for (let i = 1; i <= amount; i += 1) { \n    // викликаємо  проміс createPromise стільки разів скільки вказано в amount, передаємо індекс(номер) промісу і затримку\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n       Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    })\n     delay += step;\n  }\n}\n\n// Функція-обробник приймає позицію та затримку\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n// Функція приймає новий проміс\n  const promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    if (shouldResolve) {\n// Значенням промісу є об'єкт, в якому будуть властивості position і delay\n      resolve({position, delay});\n    } else {\n// Значенням промісу є об'єкт, в якому будуть властивості position і delay\n      reject({position, delay});\n    }\n    // Вказуємо затримку\n  }, delay);\n  });\n  return promise;\n}\n\n\n  \n  \n  // Доповни код функції createPromise таким чином, щоб вона повертала один проміс,\n  // який виконується або відхиляється через delay часу.Значенням промісу повинен бути об'єкт, \n  // в якому будуть властивості position і delay зі значеннями однойменних параметрів.Використовуй \n  // початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\n    \n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$firstDelay","document","querySelector","name","$47d4ff9957288465$var$delayStep","$47d4ff9957288465$var$amountEl","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","delay1","Number","value","step","amount","i","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.78e2ab23.js.map"}